package config

import (
	"fmt"
	"os"
	"path/filepath"

	"github.com/YitzhakMizrahi/bootstrap-cli/types"
	"gopkg.in/yaml.v3"
)

const (
	// ConfigDir is the directory where config files are stored
	ConfigDir = ".config/bootstrap"
	
	// ConfigFile is the name of the config file
	ConfigFile = "config.yaml"
)

// getConfigPath returns the full path to the config file
func getConfigPath() (string, error) {
	home, err := os.UserHomeDir()
	if err != nil {
		return "", fmt.Errorf("failed to get home directory: %w", err)
	}
	
	configDir := filepath.Join(home, ConfigDir)
	
	// Create config directory if it doesn't exist
	if err := os.MkdirAll(configDir, 0755); err != nil {
		return "", fmt.Errorf("failed to create config directory: %w", err)
	}
	
	return filepath.Join(configDir, ConfigFile), nil
}

// Load reads the config file and returns a UserConfig
func Load() (types.UserConfig, error) {
	var config types.UserConfig
	
	configPath, err := getConfigPath()
	if err != nil {
		return config, err
	}
	
	// Check if config file exists
	if _, err := os.Stat(configPath); os.IsNotExist(err) {
		return config, fmt.Errorf("config file not found, run 'bootstrap-cli init' first")
	}
	
	data, err := os.ReadFile(configPath)
	if err != nil {
		return config, fmt.Errorf("failed to read config file: %w", err)
	}
	
	if err := yaml.Unmarshal(data, &config); err != nil {
		return config, fmt.Errorf("failed to parse config file: %w", err)
	}
	
	return config, nil
}

// Save writes the UserConfig to the config file
func Save(config types.UserConfig) error {
	configPath, err := getConfigPath()
	if err != nil {
		return err
	}
	
	data, err := yaml.Marshal(config)
	if err != nil {
		return fmt.Errorf("failed to encode config: %w", err)
	}
	
	// Add a header comment to the YAML file
	fileContent := "# bootstrap-cli configuration\n# Generated by bootstrap-cli init\n\n"
	fileContent += string(data)
	
	if err := os.WriteFile(configPath, []byte(fileContent), 0644); err != nil {
		return fmt.Errorf("failed to write config file: %w", err)
	}
	
	return nil
}

// GetDefault returns a default configuration
func GetDefault() types.UserConfig {
	return types.UserConfig{
		Shell:            "zsh",
		PluginManager:    "zinit",
		Prompt:           "starship",
		CLITools:         []string{"lsd", "bat", "fzf", "ripgrep", "jq"},
		Languages:        []string{"node", "python", "go"},
		PackageManagers:  map[string]string{"node": "pnpm", "python": "pip"},
		UseRelativeLinks: true,
		BackupExisting:   true,
		Editors:          []string{"neovim"},
	}
}