package config

import (
	"fmt"
	"os"
	"path/filepath"
	"strings"
	"text/template"
	"time"
)

// Templates for different shell configurations
const (
	zshrcTemplate = `# Generated by bootstrap-cli
# Path configuration
export PATH="{{ .Path }}"

# Environment variables
{{- range $key, $value := .EnvVars }}
export {{ $key }}="{{ $value }}"
{{- end }}

# Shell configuration
export LANG=en_US.UTF-8
export EDITOR=vim

# History configuration
HISTFILE=~/.zsh_history
HISTSIZE=10000
SAVEHIST=10000
setopt appendhistory

# Oh My Zsh configuration (if installed)
{{- if .OhMyZsh }}
export ZSH="$HOME/.oh-my-zsh"
ZSH_THEME="robbyrussell"
plugins=(
    git
    docker
    {{- range .Plugins }}
    {{ . }}
    {{- end }}
)
source $ZSH/oh-my-zsh.sh
{{- end }}

# Tool-specific configurations
{{- range .Tools }}
{{ .Config }}
{{- end }}

# Aliases
alias ll='ls -la'
alias la='ls -A'
{{- range .Aliases }}
alias {{ .Name }}='{{ .Command }}'
{{- end }}
`

	bashrcTemplate = `# Generated by bootstrap-cli
# Path configuration
export PATH="{{ .Path }}"

# Environment variables
{{- range $key, $value := .EnvVars }}
export {{ $key }}="{{ $value }}"
{{- end }}

# Shell configuration
export LANG=en_US.UTF-8
export EDITOR=vim

# History configuration
HISTSIZE=10000
HISTFILESIZE=20000
shopt -s histappend

# Tool-specific configurations
{{- range .Tools }}
{{ .Config }}
{{- end }}

# Aliases
alias ll='ls -la'
alias la='ls -A'
{{- range .Aliases }}
alias {{ .Name }}='{{ .Command }}'
{{- end }}
`

	gitconfigTemplate = `# Generated by bootstrap-cli
[user]
    name = {{ .Name }}
    email = {{ .Email }}
{{- if .SigningKey }}
    signingkey = {{ .SigningKey }}
{{- end }}

[core]
    editor = vim
    excludesfile = ~/.gitignore_global

[init]
    defaultBranch = main

[color]
    ui = auto

[pull]
    rebase = false

[push]
    default = simple
`

	tmuxConfTemplate = `# Generated by bootstrap-cli
# Basic settings
set -g default-terminal "screen-256color"
set -g history-limit 10000
set -g base-index 1
setw -g pane-base-index 1

# Key bindings
set -g prefix C-a
unbind C-b
bind C-a send-prefix

# Split panes using | and -
bind | split-window -h
bind - split-window -v
unbind '"'
unbind %

# Reload config file
bind r source-file ~/.tmux.conf

# Switch panes using Alt-arrow without prefix
bind -n M-Left select-pane -L
bind -n M-Right select-pane -R
bind -n M-Up select-pane -U
bind -n M-Down select-pane -D

# Enable mouse control
set -g mouse on
`
)

// DotfilesData contains the data for generating dotfiles
type DotfilesData struct {
	Path     string
	EnvVars  map[string]string
	OhMyZsh  bool
	Plugins  []string
	Tools    []ToolConfig
	Aliases  []struct {
		Name    string
		Command string
	}
	Git struct {
		Name       string
		Email      string
		SigningKey string
	}
}

// GenerateDotfiles generates dotfiles based on the configuration
func (c *Config) GenerateDotfiles() error {
	// Create base directory
	if err := os.MkdirAll(c.Dotfiles.BaseDir, 0755); err != nil {
		return fmt.Errorf("failed to create dotfiles directory: %w", err)
	}

	// Prepare template data
	data := &DotfilesData{
		Path:    os.Getenv("PATH"),
		EnvVars: make(map[string]string),
		Tools:   make([]ToolConfig, 0),
	}

	// Collect environment variables from tools
	for _, tool := range c.Tools {
		if tool.Enabled {
			for k, v := range tool.EnvVars {
				data.EnvVars[k] = v
			}
		}
	}

	// Generate shell config
	var shellTemplate string
	var shellFile string
	switch c.Shell.Type {
	case Zsh:
		shellTemplate = zshrcTemplate
		shellFile = ".zshrc"
		data.OhMyZsh = true
		data.Plugins = c.Shell.Plugins
	case Bash:
		shellTemplate = bashrcTemplate
		shellFile = ".bashrc"
	default:
		return fmt.Errorf("unsupported shell type: %s", c.Shell.Type)
	}

	if err := generateFile(filepath.Join(c.Dotfiles.BaseDir, shellFile), shellTemplate, data); err != nil {
		return fmt.Errorf("failed to generate shell config: %w", err)
	}

	// Generate git config
	if err := generateFile(filepath.Join(c.Dotfiles.BaseDir, ".gitconfig"), gitconfigTemplate, data.Git); err != nil {
		return fmt.Errorf("failed to generate git config: %w", err)
	}

	// Generate tmux config
	if err := generateFile(filepath.Join(c.Dotfiles.BaseDir, ".tmux.conf"), tmuxConfTemplate, nil); err != nil {
		return fmt.Errorf("failed to generate tmux config: %w", err)
	}

	return nil
}

// generateFile generates a file from a template
func generateFile(path string, tmpl string, data interface{}) error {
	// Create parent directory if it doesn't exist
	if err := os.MkdirAll(filepath.Dir(path), 0755); err != nil {
		return err
	}

	// Parse template
	t, err := template.New(filepath.Base(path)).Parse(tmpl)
	if err != nil {
		return err
	}

	// Create file
	f, err := os.Create(path)
	if err != nil {
		return err
	}
	defer f.Close()

	// Execute template
	return t.Execute(f, data)
}

// BackupFile creates a backup of an existing file
func BackupFile(path string) error {
	if _, err := os.Stat(path); err != nil {
		if os.IsNotExist(err) {
			return nil
		}
		return err
	}

	backup := path + ".backup." + strings.Replace(
		time.Now().Format("20060102150405"),
		".",
		"",
		-1,
	)
	return os.Rename(path, backup)
} 