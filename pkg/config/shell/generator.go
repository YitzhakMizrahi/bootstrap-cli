package shell

import (
	"fmt"
	"os"
	"path/filepath"
	"text/template"
)

// GenerateZsh generates Zsh configuration
func GenerateZsh(data *Data) error {
	configPath := filepath.Join(data.HomeDir, ".zshrc")
	return generateConfig(configPath, zshTemplate, data)
}

// GenerateBash generates Bash configuration
func GenerateBash(data *Data) error {
	configPath := filepath.Join(data.HomeDir, ".bashrc")
	return generateConfig(configPath, bashTemplate, data)
}

// GenerateFish generates Fish configuration
func GenerateFish(data *Data) error {
	configDir := filepath.Join(data.HomeDir, ".config", "fish")
	if err := os.MkdirAll(configDir, 0755); err != nil {
		return fmt.Errorf("failed to create fish config directory: %w", err)
	}
	configPath := filepath.Join(configDir, "config.fish")
	return generateConfig(configPath, fishTemplate, data)
}

// RestoreZsh restores Zsh configuration from backup
func RestoreZsh(data *Data, backupPath string) error {
	configPath := filepath.Join(data.HomeDir, ".zshrc")
	return restoreConfig(configPath, backupPath)
}

// RestoreBash restores Bash configuration from backup
func RestoreBash(data *Data, backupPath string) error {
	configPath := filepath.Join(data.HomeDir, ".bashrc")
	return restoreConfig(configPath, backupPath)
}

// RestoreFish restores Fish configuration from backup
func RestoreFish(data *Data, backupPath string) error {
	configPath := filepath.Join(data.HomeDir, ".config", "fish", "config.fish")
	return restoreConfig(configPath, backupPath)
}

func generateConfig(path, tmpl string, data *Data) error {
	t, err := template.New("shell").Parse(tmpl)
	if err != nil {
		return fmt.Errorf("failed to parse template: %w", err)
	}

	f, err := os.Create(path)
	if err != nil {
		return fmt.Errorf("failed to create config file: %w", err)
	}
	defer f.Close()

	if err := t.Execute(f, data); err != nil {
		return fmt.Errorf("failed to execute template: %w", err)
	}

	return nil
}

func restoreConfig(configPath, backupPath string) error {
	content, err := os.ReadFile(backupPath)
	if err != nil {
		return fmt.Errorf("failed to read backup file: %w", err)
	}

	if err := os.WriteFile(configPath, content, 0644); err != nil {
		return fmt.Errorf("failed to write config file: %w", err)
	}

	return nil
}

const (
	zshTemplate = `# Generated by Bootstrap CLI
export PATH={{ range .Path }}:{{ . }}{{ end }}:$PATH

# Environment variables
{{ range $key, $value := .EnvVars }}
export {{ $key }}="{{ $value }}"
{{ end }}

# Aliases
{{ range $key, $value := .Aliases }}
alias {{ $key }}="{{ $value }}"
{{ end }}

# Custom configuration
{{ .Custom }}
`

	bashTemplate = `# Generated by Bootstrap CLI
export PATH={{ range .Path }}:{{ . }}{{ end }}:$PATH

# Environment variables
{{ range $key, $value := .EnvVars }}
export {{ $key }}="{{ $value }}"
{{ end }}

# Aliases
{{ range $key, $value := .Aliases }}
alias {{ $key }}="{{ $value }}"
{{ end }}

# Custom configuration
{{ .Custom }}
`

	fishTemplate = `# Generated by Bootstrap CLI
set -gx PATH {{ range .Path }}{{ . }} {{ end }} $PATH

# Environment variables
{{ range $key, $value := .EnvVars }}
set -gx {{ $key }} "{{ $value }}"
{{ end }}

# Aliases
{{ range $key, $value := .Aliases }}
alias {{ $key }}="{{ $value }}"
{{ end }}

# Custom configuration
{{ .Custom }}
`
) 