package templates

import (
	"fmt"
	"strings"
	"text/template"
)

// Template names
const (
	ZshTemplate  = "zsh"
	BashTemplate = "bash"
	FishTemplate = "fish"
)

// Shell configuration templates
const (
	zshConfig = `# Generated by bootstrap-cli
{{ range .Plugins -}}
source {{ . }}
{{ end }}
{{ range $key, $value := .Aliases -}}
alias {{ $key }}='{{ $value }}'
{{ end }}
{{ range $key, $value := .EnvVars -}}
export {{ $key }}='{{ $value }}'
{{ end }}
export PATH={{ formatPath .Path }}
{{ range .CustomPaths -}}
{{ . }}
{{ end }}`

	bashConfig = `# Generated by bootstrap-cli
{{ range .Plugins -}}
source {{ . }}
{{ end }}
{{ range $key, $value := .Aliases -}}
alias {{ $key }}='{{ $value }}'
{{ end }}
{{ range $key, $value := .EnvVars -}}
export {{ $key }}='{{ $value }}'
{{ end }}
export PATH={{ formatPath .Path }}
{{ range .CustomPaths -}}
{{ . }}
{{ end }}`

	fishConfig = `# Generated by bootstrap-cli
{{ range .Plugins -}}
source {{ . }}
{{ end }}
{{ range $key, $value := .Aliases -}}
alias {{ $key }}='{{ $value }}'
{{ end }}
{{ range $key, $value := .EnvVars -}}
set -gx {{ $key }} '{{ $value }}'
{{ end }}
set -gx PATH {{ formatPath .Path }}
{{ range .CustomPaths -}}
{{ . }}
{{ end }}`
)

// TemplateData represents the data needed to generate shell configurations
type TemplateData struct {
	Plugins     []string
	Aliases     map[string]string
	EnvVars     map[string]string
	Path        []string
	CustomPaths []string
}

// GetTemplate returns the template for the specified shell
func GetTemplate(shell string) (*template.Template, error) {
	var (
		tmplContent string
		tmplName    string
	)

	switch shell {
	case ZshTemplate:
		tmplContent = zshConfig
		tmplName = "zshrc"
	case BashTemplate:
		tmplContent = bashConfig
		tmplName = "bashrc"
	case FishTemplate:
		tmplContent = fishConfig
		tmplName = "config.fish"
	default:
		return nil, fmt.Errorf("unsupported shell: %s", shell)
	}

	// Create template functions
	funcMap := template.FuncMap{
		"formatPath": func(paths []string) string {
			return strings.Join(append(paths, "$PATH"), ":")
		},
	}

	return template.New(tmplName).Funcs(funcMap).Parse(tmplContent)
} 